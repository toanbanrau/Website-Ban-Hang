import React, { useEffect, useState } from "react";
import {
  Card,
  Form,
  Input,
  Button,
  Divider,
  List,
  Typography,
  message,
  Select,
} from "antd";
import axios from "axios";

const { Title, Text } = Typography;

const Checkout = () => {
  const [form] = Form.useForm();
  const [cartItems, setCartItems] = useState([]);
  const [loading, setLoading] = useState(false);
  const userId = localStorage.getItem("userId"); // üìå L·∫•y userId t·ª´ localStorage

  useEffect(() => {
    if (userId) {
      fetchCartItems();
    }
  }, [userId]); // Ch·∫°y khi userId thay ƒë·ªïi

  // üìå G·ªçi API l·∫•y gi·ªè h√†ng theo userId
  const fetchCartItems = async () => {
    try {
      const response = await axios.get(
        `http://localhost:3000/cart?userId=${userId}`
      );
      setCartItems(response.data);
    } catch (error) {
      message.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu gi·ªè h√†ng!");
    }
  };

  // üìå C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
  const updateCartQuantity = async (itemId, newQuantity) => {
    if (newQuantity < 1) return;

    try {
      await axios.patch(`http://localhost:3000/cart/${itemId}`, {
        quantity: newQuantity,
      });

      // C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c
      setCartItems((prevCart) =>
        prevCart.map((item) =>
          item.id === itemId ? { ...item, quantity: newQuantity } : item
        )
      );
    } catch (error) {
      message.error("C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th·∫•t b·∫°i!");
    }
  };

  // üìå X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
  const removeCartItem = async (itemId) => {
    try {
      await axios.delete(`http://localhost:3000/cart/${itemId}`);
      setCartItems(cartItems.filter((item) => item.id !== itemId));
      message.success("ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng!");
    } catch (error) {
      message.error("X√≥a s·∫£n ph·∫©m th·∫•t b·∫°i!");
    }
  };

  // üìå G·ª≠i ƒë∆°n h√†ng l√™n server
  const handleOrder = async (values) => {
    setLoading(true);
    try {
      await axios.post("http://localhost:3000/orders", {
        userId,
        items: cartItems,
        ...values,
      });
      message.success("ƒê·∫∑t h√†ng th√†nh c√¥ng!");
      setCartItems([]); // X√≥a gi·ªè h√†ng sau khi ƒë·∫∑t h√†ng
    } catch (error) {
      message.error("ƒê·∫∑t h√†ng th·∫•t b·∫°i!");
    } finally {
      setLoading(false);
    }
  };

  const totalPrice = cartItems.reduce(
    (acc, item) => acc + item.price * item.quantity,
    0
  );

  return (
    <div className="checkout-container">
      {/* Form nh·∫≠p th√¥ng tin giao h√†ng */}
      <Card title="Th√¥ng Tin Giao H√†ng" className="checkout-card">
        <Form form={form} layout="vertical" onFinish={handleOrder}>
          <Form.Item
            name="name"
            label="H·ªç v√† T√™n"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p h·ªç v√† t√™n" }]}
          >
            <Input placeholder="Nh·∫≠p h·ªç v√† t√™n" />
          </Form.Item>
          <Form.Item
            name="address"
            label="ƒê·ªãa ch·ªâ giao h√†ng"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ" }]}
          >
            <Input placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ" />
          </Form.Item>
          <Form.Item
            name="phone"
            label="S·ªë ƒëi·ªán tho·∫°i"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" }]}
          >
            <Input placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" />
          </Form.Item>
          <Form.Item
            name="paymentMethod"
            label="Ph∆∞∆°ng th·ª©c thanh to√°n"
            rules={[
              {
                required: true,
                message: "Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n",
              },
            ]}
          >
            <Select placeholder="Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n">
              <Select.Option value="creditCard">Th·∫ª t√≠n d·ª•ng</Select.Option>
              <Select.Option value="cashOnDelivery">
                Thanh to√°n khi nh·∫≠n h√†ng
              </Select.Option>
              <Select.Option value="bankTransfer">
                Chuy·ªÉn kho·∫£n ng√¢n h√†ng
              </Select.Option>
            </Select>
          </Form.Item>
          <Button type="primary" htmlType="submit" block loading={loading}>
            ƒê·∫∑t H√†ng
          </Button>
        </Form>
      </Card>

      {/* Danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng */}
      <Card title="Gi·ªè H√†ng C·ªßa B·∫°n" className="checkout-card">
        <List
          dataSource={cartItems}
          renderItem={(item) => (
            <List.Item>
              <Text>{item.name}</Text>
              <div>
                <Button
                  size="small"
                  onClick={() => updateCartQuantity(item.id, item.quantity - 1)}
                >
                  -
                </Button>
                <Text style={{ margin: "0 10px" }}>{item.quantity}</Text>
                <Button
                  size="small"
                  onClick={() => updateCartQuantity(item.id, item.quantity + 1)}
                >
                  +
                </Button>
              </div>
              <Text strong>
                {item.quantity} x ${item.price}
              </Text>
              <Button
                type="link"
                danger
                onClick={() => removeCartItem(item.id)}
              >
                X√≥a
              </Button>
            </List.Item>
          )}
        />
        <Divider />
        <Title level={4}>T·ªïng ti·ªÅn: ${totalPrice}</Title>
      </Card>
    </div>
  );
};

export default Checkout;
