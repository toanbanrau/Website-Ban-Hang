import React, { useEffect, useState } from "react";
import {
  Card,
  Form,
  Input,
  Button,
  Divider,
  List,
  Typography,
  message,
  Select,
  Col,
  Row,
} from "antd";
import axios from "axios";

const { Title, Text } = Typography;

const Checkout = () => {
  const [form] = Form.useForm();
  const [cartItems, setCartItems] = useState([]);
  const [loading, setLoading] = useState(false);
  const userId = localStorage.getItem("userId"); // üìå L·∫•y userId t·ª´ localStorage

  const [vouchers, setVouchers] = useState([]); // Danh s√°ch voucher
  const [selectedVoucher, setSelectedVoucher] = useState(null); // Voucher ƒë∆∞·ª£c ch·ªçn
  const [discountedTotal, setDiscountedTotal] = useState(); // T·ªïng ti·ªÅn sau gi·∫£m gi√° // üìå Kh·ªüi t·∫°o state cho voucher
  useEffect(() => {
    if (userId) {
      fetchCartItems();
    }
  }, [userId]); // Ch·∫°y khi userId thay ƒë·ªïi

  // üìå G·ªçi API l·∫•y gi·ªè h√†ng theo userId
  // L·∫•y t·∫•t c·∫£ voucher
  useEffect(() => {
    const fetchAllVouchers = async () => {
      try {
        const { data } = await axios.get("http://localhost:3000/vouchers");
        setVouchers(data); // Hi·ªÉn th·ªã danh s√°ch voucher trong console
      } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch voucher:", error);
        message.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu voucher!");
      }
    };

    fetchAllVouchers();
  }, []);

  const handleApplyVoucher = (voucherCode) => {
    const voucher = vouchers.find((v) => v.code === voucherCode);

    if (!voucher) {
      message.error("M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá!");
      setSelectedVoucher(null);
      setDiscountedTotal(totalPrice); // Kh√¥ng √°p d·ª•ng gi·∫£m gi√°
      return;
    }

    if (totalPrice < voucher.minOrderValue) {
      message.warning(
        `ƒê∆°n h√†ng ph·∫£i c√≥ gi√° tr·ªã t·ªëi thi·ªÉu ${voucher.minOrderValue.toLocaleString()} VNƒê ƒë·ªÉ √°p d·ª•ng m√£ gi·∫£m gi√° n√†y!`
      );
      setSelectedVoucher(null);
      setDiscountedTotal(totalPrice); // Kh√¥ng √°p d·ª•ng gi·∫£m gi√°
      return;
    }

    // T√≠nh t·ªïng ti·ªÅn sau gi·∫£m gi√°
    const discount = (totalPrice * voucher.discount) / 100;
    const newTotal = totalPrice - discount;

    setSelectedVoucher(voucher); // L∆∞u voucher ƒë∆∞·ª£c ch·ªçn
    setDiscountedTotal(newTotal); // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn sau gi·∫£m gi√°
    message.success(
      `√Åp d·ª•ng m√£ gi·∫£m gi√° th√†nh c√¥ng! Gi·∫£m ${discount.toLocaleString()} VNƒê`
    );
  };

  const fetchCartItems = async () => {
    if (!userId) {
      message.warning("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem gi·ªè h√†ng!");
      return;
    }

    try {
      const { data } = await axios.get(
        `http://localhost:3000/cart?userId=${userId}`
      );
      console.log(data);

      const validCartItems = data.flatMap((cart: any) =>
        cart.products.map((product: any) => ({
          id: product.id, // ID c·ªßa s·∫£n ph·∫©m trong gi·ªè h√†ng
          productId: product.id, // ID c·ªßa s·∫£n ph·∫©m trong danh s√°ch s·∫£n ph·∫©m
          name: product.name, // T√™n s·∫£n ph·∫©m
          price: product.price, // Gi√° s·∫£n ph·∫©m
          thumbnail: product.thumbnail, // ·∫¢nh s·∫£n ph·∫©m
          quantity: product.quantity, // S·ªë l∆∞·ª£ng s·∫£n ph·∫©m
          totalPrice: product.totalPrice, // T·ªïng gi√°
        }))
      );
      setCartItems(validCartItems);
    } catch (error) {
      toast.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu gi·ªè h√†ng!");
    }
  };

  // üìå C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
  const deleteCartItem = async (productId: string) => {
    if (!userId) {
      message.warning("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ thao t√°c!");
      return;
    }

    try {
      // 1Ô∏è‚É£ L·∫•y gi·ªè h√†ng hi·ªán t·∫°i c·ªßa user
      const { data } = await axios.get(
        `http://localhost:3000/cart?userId=${userId}`
      );

      if (!data || data.length === 0) {
        message.warning("Gi·ªè h√†ng tr·ªëng!");
        return;
      }

      let cart = data[0];

      // 2Ô∏è‚É£ L·ªçc b·ªè s·∫£n ph·∫©m c·∫ßn x√≥a
      const updatedProducts = cart.products.filter(
        (product: any) => product.id !== productId
      );

      if (updatedProducts.length === 0) {
        // 3Ô∏è‚É£ X√≥a gi·ªè h√†ng n·∫øu kh√¥ng c√≤n s·∫£n ph·∫©m
        await axios.delete(`http://localhost:3000/cart/${cart.id}`);
        setCartItems([]); // Reset gi·ªè h√†ng trong state
      } else {
        // 4Ô∏è‚É£ C·∫≠p nh·∫≠t gi·ªè h√†ng n·∫øu v·∫´n c√≤n s·∫£n ph·∫©m
        await axios.put(`http://localhost:3000/cart/${cart.id}`, {
          ...cart,
          products: updatedProducts,
        });

        // üî• C·∫≠p nh·∫≠t state D·ª∞A TR√äN STATE C≈® ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng m·∫•t d·ªØ li·ªáu
        setCartItems((prevCart) =>
          prevCart.filter((item) => item.id !== productId)
        );
      }

      message.success("ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng!");
    } catch (error) {
      console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", error);
      message.error("X√≥a s·∫£n ph·∫©m th·∫•t b·∫°i!");
    }
  };

  const updateCartQuantity = async (productId: string, newQuantity: number) => {
    if (newQuantity < 1) {
      message.warning("S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0!");
      return;
    }

    if (!userId) {
      message.warning("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ thao t√°c!");
      return;
    }

    try {
      // L·∫•y gi·ªè h√†ng hi·ªán t·∫°i c·ªßa user
      const { data } = await axios.get(
        `http://localhost:3000/cart?userId=${userId}`
      );

      if (!data || data.length === 0) {
        message.warning("Gi·ªè h√†ng tr·ªëng!");
        return;
      }

      let cart = data[0];

      // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
      const updatedProducts = cart.products.map((product: any) =>
        product.id === productId
          ? {
              ...product,
              quantity: newQuantity,
              totalPrice: newQuantity * product.price,
            }
          : product
      );

      // G·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t gi·ªè h√†ng
      await axios.put(`http://localhost:3000/cart/${cart.id}`, {
        ...cart,
        products: updatedProducts,
      });

      // C·∫≠p nh·∫≠t state gi·ªè h√†ng
      setCartItems((prevCart) =>
        prevCart.map((item) =>
          item.id === productId
            ? {
                ...item,
                quantity: newQuantity,
                totalPrice: newQuantity * item.price,
              }
            : item
        )
      );

      message.success("C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh c√¥ng!");
    } catch (error) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", error);
      message.error("C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th·∫•t b·∫°i!");
    }
  };

  // üìå G·ª≠i ƒë∆°n h√†ng l√™n server
  const handleOrder = async (values) => {
    setLoading(true);
    try {
      await axios.post("http://localhost:3000/orders", {
        userId,
        items: cartItems,
        ...values,
      });
      message.success("ƒê·∫∑t h√†ng th√†nh c√¥ng!");
      setCartItems([]); // X√≥a gi·ªè h√†ng sau khi ƒë·∫∑t h√†ng
    } catch (error) {
      message.error("ƒê·∫∑t h√†ng th·∫•t b·∫°i!");
    } finally {
      setLoading(false);
    }
  };

  const totalPrice = cartItems.reduce(
    (acc, item) => acc + item.price * item.quantity,
    0
  );

  return (
    <Row gutter={24}>
      {/* C·ªôt b√™n tr√°i: Form nh·∫≠p th√¥ng tin giao h√†ng */}
      <Col xs={24} md={12}>
        <Card title="Th√¥ng Tin Giao H√†ng" className="checkout-card">
          <Form form={form} layout="vertical" onFinish={handleOrder}>
            <Form.Item
              name="name"
              label="H·ªç v√† T√™n"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p h·ªç v√† t√™n" }]}
            >
              <Input placeholder="Nh·∫≠p h·ªç v√† t√™n" />
            </Form.Item>
            <Form.Item
              name="address"
              label="ƒê·ªãa ch·ªâ giao h√†ng"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ" }]}
            >
              <Input placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ" />
            </Form.Item>
            <Form.Item
              name="phone"
              label="S·ªë ƒëi·ªán tho·∫°i"
              rules={[
                { required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" },
                { pattern: /^0\d{9}$/, message: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá" },
              ]}
            >
              <Input placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" type="tel" />
            </Form.Item>
            <Form.Item
              name="paymentMethod"
              label="Ph∆∞∆°ng th·ª©c thanh to√°n"
              rules={[
                {
                  required: true,
                  message: "Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n",
                },
              ]}
            >
              <Select placeholder="Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n">
                <Select.Option value="creditCard">Th·∫ª t√≠n d·ª•ng</Select.Option>
                <Select.Option value="cashOnDelivery">
                  Thanh to√°n khi nh·∫≠n h√†ng
                </Select.Option>
                <Select.Option value="bankTransfer">
                  Chuy·ªÉn kho·∫£n ng√¢n h√†ng
                </Select.Option>
              </Select>
            </Form.Item>
            <Button type="primary" htmlType="submit" block loading={loading}>
              ƒê·∫∑t H√†ng
            </Button>
          </Form>
        </Card>
      </Col>

      {/* C·ªôt b√™n ph·∫£i: Gi·ªè h√†ng */}
      <Col xs={24} md={12}>
        <Card title="Gi·ªè H√†ng C·ªßa B·∫°n" className="checkout-card">
          <List
            dataSource={cartItems}
            renderItem={(item) => (
              <List.Item>
                <Text>{item.name}</Text>
                <div>
                  <Button
                    size="small"
                    onClick={() =>
                      updateCartQuantity(item.productId, item.quantity - 1)
                    }
                  >
                    -
                  </Button>
                  <Text style={{ margin: "0 10px" }}>{item.quantity}</Text>
                  <Button
                    size="small"
                    onClick={() =>
                      updateCartQuantity(item.productId, item.quantity + 1)
                    }
                  >
                    +
                  </Button>
                </div>
                <Text strong>
                  {item.quantity} x {item.price} VNƒê
                </Text>
                <Button
                  type="link"
                  danger
                  onClick={() => deleteCartItem(item.productId)}
                >
                  X√≥a
                </Button>
              </List.Item>
            )}
          />
          <Divider />
          <Title level={4}>T·ªïng ti·ªÅn: {totalPrice.toLocaleString()} VNƒê</Title>
          {selectedVoucher && (
            <Title level={4} style={{ color: "green" }}>
              Gi·∫£m gi√°: -{(totalPrice - discountedTotal || 0).toLocaleString()}{" "}
              VNƒê
            </Title>
          )}
          <Title level={4}>
            T·ªïng thanh to√°n: {discountedTotal.toLocaleString()} VNƒê
          </Title>
        </Card>
        <Card title="√Åp D·ª•ng M√£ Gi·∫£m Gi√°" className="checkout-card">
          <Select
            placeholder="Ch·ªçn m√£ gi·∫£m gi√°"
            style={{ width: "100%" }}
            onChange={handleApplyVoucher}
          >
            {vouchers.map((voucher) => (
              <Select.Option key={voucher.id} value={voucher.code}>
                {voucher.code} - Gi·∫£m {voucher.discount}% (T·ªëi thi·ªÉu:{" "}
                {voucher.minOrderValue.toLocaleString()} VNƒê)
              </Select.Option>
            ))}
          </Select>
        </Card>
      </Col>
    </Row>
  );
};

export default Checkout;
